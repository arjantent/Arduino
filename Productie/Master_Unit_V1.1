# Begin of Imports #
from tkinter import*
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import serial
import time
from serialclass import Serializer
plt.matplotlib.use("TkAgg")
# End of Imports #

# todo: implementeer code van stefan voor inlezen temp en lux waardes -> temp_val & lux_val

class Unit:
    def __init__(self, master, port, baudrate=9600, timeout=0):         # constructor

        self.frame1 = Frame(master)
        self.frame1.pack(side=LEFT, fill=BOTH, expand=1)
        self.port = serial.Serial(port=port, baudrate=baudrate, timeout=timeout)

        self.rollin_bool = True
        self.automatic_bool = False

        self.uitrollen = StringVar()
        self.uitrollen.set('0')
        self.inrollen = StringVar()
        self.inrollen.set('0')

        self.temperatuur = StringVar()      # standaard temperatuur waarde
        self.temperatuur.set('25')
        self.lichtint = StringVar()         # standaard lux waarde
        self.lichtint.set('800')

        self.lux_val = StringVar()          # input van de sensor
        self.lux_val.set('900')             #Todo: Dit is een test value

        self.var = StringVar()
        self.var.set('Ingerold')

        # Begin Uit- en Inrolafstanden input #
        def uitrolafstand():
            try:
                self.uitrolwaarde = int(self.uitrollen.get())
                print(self.uitrolwaarde)
                return
            except ValueError:
                print("Ongeldige waarde.")

        def inrolafstand():
            try:
                self.inrolwaarde = int(self.inrollen.get())
                print(self.inrolwaarde)
                return self.inrolwaarde
            except ValueError:
                print("Ongeldige waarde.")

        def submitten():
            uitrolafstand()
            inrolafstand()
            # einde afstand submit

            # begin temp/ lux submit
        def temperatuur():
            try:
                self.temperatuurwaarde = int(self.temperatuur.get())
                print(self.temperatuurwaarde)
                return
            except ValueError:
                print("Ongeldige waarde.")

        def lichtint():
            try:
                self.lichtwaarde = int(self.lichtint.get())
                print(self.lichtwaarde)
                return
            except ValueError:
                print("Ongeldige waarde.")

        def submitten2():
            temperatuur()
            lichtint()
        # Einde Uit- en Inrolafstanden input #

        # Checkbutton #
        self.checkbutton = Checkbutton(self.frame1, text="Automatisch", onvalue=1, pady=20, padx=0, command=self.set_automatic_bool).grid(row=0, column=0, columnspan=1,  sticky=E)
        print("test checkbutton")

        # Labels #
        self.Extend_Label = Label(self.frame1, text="Uitrol afstand", pady=20, padx=10).grid(row=5, column=0, sticky=E)
        self.Retract_Label = Label(self.frame1, text="Inrol afstand", pady=20, padx=10).grid(row=6, column=0, sticky=E)
        self.Temperture_Label = Label(self.frame1, text="Temperatuur Trigger", pady=20, padx=10).grid(row=2, column=0, sticky=E)
        self.LightIntensity_Label = Label(self.frame1, text="Lichtintensiteit Trigger", pady=20, padx=10).grid(row=3, column=0, sticky=E)

        print("test label")
        # Entry #
        self.Extend_Entry = Entry(self.frame1, textvariable=self.uitrollen).grid(row=5, column=1, sticky=W)
        self.Retract_Entry = Entry(self.frame1, textvariable=self.inrollen).grid(row=6, column=1, sticky=W)
        self.Temperture_Entry = Entry(self.frame1, textvariable=self.temperatuur).grid(row=2, column=1, sticky=W)
        self.LightIntensity_Entry = Entry(self.frame1, textvariable=self.lichtint).grid(row=3, column=1, sticky=W)
        print("test entry")

        # Buttons #
        self.A = Button(self.frame1, text="Inrollen", padx=10, pady=20, command=self.rollin).grid(row=8, column=0, sticky=E)            # inrol knop
        self.B = Button(self.frame1, text="Uitrollen", padx=10, pady=20, command=self.rolluit).grid(row=8, column=1, sticky=W)          # uitrol knop
        self.C = Button(self.frame1, text="Submit", padx=20, pady=5, command=submitten).grid(row=7, column=0, sticky=E, columnspan=2)   # submit knop
        self.D = Button(self.frame1, text="Submit", padx=20, pady=5, command=submitten2).grid(row=4, column=0, sticky=E, columnspan=2)  # submit knop 2

        print("test button")

        # test graph code #
        self.f = plt.Figure(figsize=(4,5), dpi=90)
        # Todo : pas de waardes op de assen aan afhankelijk van de data die gelezen wordt
        self.a = self.f.add_subplot(211)
        self.a.plot([1, 2, 3, 4, 5, 6, 7, 8], [5, 6, 1, 7, 4, 2, 5, 0])
        self.a.set_title('Tempertuur')
        self.a.set_xlabel('Uren')
        self.a.set_ylabel('Celsius')

        self.b = self.f.add_subplot(212)
        self.b.plot([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 6, 1, 0, 2, 1, 0])
        self.b.set_title('Lux')
        self.b.set_xlabel('Uren')
        self.b.set_ylabel('Lichtintensiteit')

        self.f.tight_layout(pad=0.8, w_pad=0.5, h_pad=1.0)
        self.canvas = FigureCanvasTkAgg(self.f, master=self.frame1)
        self.canvas.get_tk_widget().grid(row=9, column=0, columnspan=2)

        # status bar #
        #Todo : zorg dat de status txt wordt geupdate afhankelijk van de status van de lampjes (groen/bewegend/rood)
        self.status = Label(self.frame1, textvariable=self.var, bd=2, relief=SUNKEN, pady=15, padx=50).grid(row=10, column=0, columnspan=2)


    def open(self):
        ''' Open the serial port.'''
        self.port.open()

    def close(self):
        ''' Close the serial port.'''
        self.port.close()

    def write(self, msg):
        time.sleep(0.5)
        self.port.write(msg.encode())

    def readline(self):
        return self.port.readline()

    def readlines(self):
        return self.port.readlines()

    def onGroen(self):
        self.write("H")

    def offGroen(self):
        self.write("L")

    def offRood(self):
        self.write("U")

    def onRood(self):
        self.write("A")

    def onGeel(self):
        self.write("N")

    def offGeel(self):
        self.write("M")

    def blink(self):
        for i in range(5):
            self.onGeel()
            self.offGeel()

    # uitrollen
    def rolluit(self):
        if self.automatic_bool == False:
            if self.rollin_bool == True:
                self.offRood()
                self.onGroen()
                self.blink()
                self.offGroen()
                self.onRood()
                self.var.set('Uitgerold')
                self.rollin_bool = False

    # inrollen
    def rollin(self):
        if self.automatic_bool == False:
            if self.rollin_bool == False:
                self.offGroen()
                self.onRood()
                self.blink()
                self.offRood()
                self.onGroen()
                self.var.set('Ingerold')
                self.rollin_bool = True

    # Automatic / Manual switch
    def set_automatic_bool(self):
        self.automatic_bool = not self.automatic_bool
        return self.set_automatic_bool

    # check lux waarde #
    def check_lux(self):
        if self.lux_val >= self.lichtint:
            print("true")
            self.rolluit()

    # check temp waarde #
    def check_temp(self):
        if self.temp_val >= self.temperatuur:
            print("ook true")
            self.rolluit()




